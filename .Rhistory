# for(j in dupInd)
#   abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
# points(start(uniqExGr), tmpPlotVarMed, type="l", pch=16, lwd=2, col="purple")
# points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
})
## Plot variance
output$plotVar <- renderPlot({
strTmp<- "+"
xLim<- sort(ranges$x, decreasing=F)
yDist=.14
par(mar=c(5.1, 5.1,yDist/2, 2.1))
tmpPlotVarMed<-as.numeric(apply(psimed,1,var))
if(strTmp=="+"){
xlabTmp<- "-->\nExon start"
} else{
xlabTmp<- "<--\nExon start"
}
plot(start(uniqExGr), tmpPlotVarMed, type="l", lwd=0, col=0, pch=NA, ylab="var", xlab=xlabTmp, xlim=xLim)
for(j in unique(c(firstExInd, lastExInd)))
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
for(j in dupInd)
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
points(start(uniqExGr), tmpPlotVarMed, type="l", pch=16, lwd=2, col="purple")
points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
})
# Plot boxplots
output$plotBox <- renderPlot({
#par(mar=c(5.1, 5.1,yDist/2, 2.1))
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(cex.lab=1.5)
par(cex.axis=1.5)
par(cex.main=1.5)
cols<- c("black", "red","blue","green", "orange", "purple")
xLim<- sort(ranges$x, decreasing=F)
yLim<- ranges$y
if(yLim[1]==1){
limPlot<- 6
if(length(xLim[1])){
strTmp<- "+"
ordInd<- order(start(uniqExGr), decreasing=FALSE)
selInd<- which(start(uniqExGr)>=xLim[1] & (start(uniqExGr)<=xLim[2]))
exonNo<- selInd
if( strTmp== "-")
exonNo<- length(start(uniqExGr))-selInd+1
if(length(selInd)>limPlot)
selInd<- selInd[1:limPlot]
psidat[,selInd]
exonNo<- exonNo[1:limPlot]
par(mfrow=c(1,limPlot))
for (i in 1:length(selInd)){
plotList<- tapply(psidat[,selInd[i]], groupSam, c)
grp<- groupSam
grp[which(grp!="A")]<- "O"
dattmp<- data.frame(exinc=psidat[,selInd[i]], group=grp)
pval<-kruskal.test(exinc ~ group, data = dattmp)$p.value
boxplot(plotList, main=paste("Exon", exonNo[i]),
ylim=c((min(psidat[,selInd])-.1),(max(psidat[,selInd])+.1)),
xlab=paste("P =", trunc(pval*100000)/100000),border=cols)
}
}
}
})
# Show legend
output$plotLegend <- renderPlot({
samNo<- unlist(lapply(LETTERS[1:6], function(x){return(length(which(groupSam==x)))}))
names(samNo)<- LETTERS[1:6]
realNames<-c(
paste("Titinopathy (N=",samNo["A"], ")",sep=""),
"Heart tissue of 19 weeks female embryo (N=1)",
"Skeletal muscle tissue of 22 weeks male (N=1)",
"Heart tissue of 28 weeks female embryo (N=1)",
"Skeletal muscle tissue of 19 weeks female (N=1)",
"Heart tissue of 30 years old female (N=1)")
names(realNames)<- LETTERS[1:6]
par(mar=rep(0,4))
plot(0,.5, xaxt="n" , yaxt="n", axes=FALSE, col=NA, xlab="", ylab="")
cols<- c("black", "red","blue","green", "orange", "purple")
legend("left", legend=c(realNames[(unique(groupSam))], "first exon", "Last exon", "Repeat exon"), lty=c(rep(1,length(unique(groupSam))),NA, NA, NA), pch=c(rep(NA,length(unique(groupSam)) ),24,25, 23),col=c(cols,"black","black", "black"),
pt.bg=c(rep(NA,length(unique(groupSam)) ), "red", "red", "blue"), lwd=rep(2, length(unique(groupSam))+3), pt.cex=c(rep(NA,length(unique(groupSam)) ), 1.5,1.5, 1.5), bg="white")
})
# Define brushing action in main figure
observe({
brush <- input$plotMain_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(1,1)
} else {
ranges$x <- c(min(start(uniqExGr))-100, max(start(uniqExGr))+100)
ranges$y <- c(0,0)
}
})
}
shinyApp(ui, server)
library(shiny)
### ui
ui <- fluidPage(
titlePanel("Inclusion levels of OBSCN exons"),
HTML("<br/><h4>Instructions:</h4>
◉ Brush (<i>i.e.</i> Left-click and drag) to Zoom.<br/>
◉ Left-click once to zoom out.<br/>
◉ When you Zoom you can also see the inclusion levels of the first 6 exons in the selected region as box plots.<br/>
◉ The numbers in the plot (written in black colour) show the exon numbers.<br/>
◉ Pvalues beneathe the box plots are resulted by Kruskal Wallis test (Null hypothesis: exon inclusion in A is equal to that of other samples.)"
),
fluidRow(tags$a(href="https://bioconductor.org/packages/release/bioc/html/IntEREst.html",
tags$img(src="IntEREst_medium.jpg",
title="Example Image Link",
height=90,
width=180))),
fluidRow(
column(12,
plotOutput("plotLegend", width = 300, height = 200)
)),
fluidRow(
column(12,
plotOutput("plotMain", width = 1200, height = 500,
#dblclick = "plotMain_dblclick",
brush = brushOpts(
id = "plotMain_brush"
)),
),
),
fluidRow(
column(12,
plotOutput("plotVar", width = 1200, height = 100)
)
),
fluidRow(
column(12,
plotOutput("plotBox", width = 1200, height = 300))
)
)
### Server
server<- function(input, output) {
ranges <- reactiveValues(x = c(min(start(uniqExGr))-100, max(start(uniqExGr))+100), y =c(0,0) )
output$plotMain <- renderPlot({
strTmp<- "+"
xLim<- sort(ranges$x, decreasing=F)
# layout(matrix(c(1,2), 2, 1, byrow = TRUE),
#        heights=c(3,1))
yDist=.14
par(mar=c(yDist/2, 5.1, 4.1, 2.1))
cols<- c("black", "red","blue","green", "orange", "purple")
plot(start(uniqExGr), psimed[,"A"], lwd=0, col=0, pch=NA,
xlab="", xaxt='n', ylab="mean", ylim=c(-0.03,1), main="OBSCN", xlim=xLim)
for(j in unique(c(firstExInd, lastExInd)))
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
for(j in dupInd)
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
points(start(uniqExGr), psimed[,(unique(groupSam))[1]], type="b", pch=16, lwd=2, col=cols[1])
for(n in 2:length(cols))
points(start(uniqExGr), psimed[,(unique(groupSam))[n]], type="b", pch=16, lwd=2, col=cols[n])
if(strTmp=="+"){
points(start(uniqExGr)[firstExInd], rep(-.03, length(firstExInd)), col=1, bg=2, pch=24, cex=1.5, lwd=2)
points(start(uniqExGr)[lastExInd], rep(-.03, length(lastExInd)), col=1, bg=2, pch=25, cex=1.5, lwd=2)
} else {
points(start(uniqExGr)[firstExInd], rep(-.03, length(firstExInd)), col=1, bg=2, pch=25, cex=1.5, lwd=2)
points(start(uniqExGr)[lastExInd], rep(-.03, length(lastExInd)), col=1, bg=2, pch=24, cex=1.5, lwd=2)
}
points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
# legend("right", legend=c((unique(groupSam)), "first ex", "Last ex", "Repeat ex"), lty=c(rep(1,length(unique(groupSam))),NA, NA, NA), pch=c(rep(NA,length(unique(groupSam)) ),24,25, 23),col=c(cols,"black","black", "black"),
#        pt.bg=c(rep(NA,length(unique(groupSam)) ), "red", "red", "blue"), lwd=rep(2, length(unique(groupSam))+3), pt.cex=c(rep(NA,length(unique(groupSam)) ), 1.5,1.5, 1.5), bg="white")
par(mar=c(5.1, 5.1,yDist/2, 2.1))
tmpPlotVarMed<-as.numeric(apply(psimed,1,var))
if(strTmp=="+"){
xlabTmp<- "-->\nExon start"
} else{
xlabTmp<- "<--\nExon start"
}
exonNo<- 1:length(start(uniqExGr))
if(strTmp=="-")
exonNo<- length(start(uniqExGr))-(1:length(start(uniqExGr)))+1
text(start(uniqExGr), psimed[,"A"],  exonNo,
cex=1, pos=1,col="black", srt=+30)
# plot(start(uniqExGr), tmpPlotVarMed, type="l", lwd=0, col=0, pch=NA, ylab="var", xlab=xlabTmp, xlim=xLim)
# for(j in unique(c(firstExInd, lastExInd)))
#   abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
# for(j in dupInd)
#   abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
# points(start(uniqExGr), tmpPlotVarMed, type="l", pch=16, lwd=2, col="purple")
# points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
})
## Plot variance
output$plotVar <- renderPlot({
strTmp<- "+"
xLim<- sort(ranges$x, decreasing=F)
yDist=.14
par(mar=c(5.1, 5.1,yDist/2, 2.1))
tmpPlotVarMed<-as.numeric(apply(psimed,1,var))
if(strTmp=="+"){
xlabTmp<- "-->\nExon start"
} else{
xlabTmp<- "<--\nExon start"
}
plot(start(uniqExGr), tmpPlotVarMed, type="l", lwd=0, col=0, pch=NA, ylab="var", xlab=xlabTmp, xlim=xLim)
for(j in unique(c(firstExInd, lastExInd)))
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
for(j in dupInd)
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
points(start(uniqExGr), tmpPlotVarMed, type="l", pch=16, lwd=2, col="purple")
points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
})
# Plot boxplots
output$plotBox <- renderPlot({
#par(mar=c(5.1, 5.1,yDist/2, 2.1))
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(cex.lab=1.5)
par(cex.axis=1.5)
par(cex.main=1.5)
cols<- c("black", "red","blue","green", "orange", "purple")
xLim<- sort(ranges$x, decreasing=F)
yLim<- ranges$y
if(yLim[1]==1){
limPlot<- 6
if(length(xLim[1])){
strTmp<- "+"
ordInd<- order(start(uniqExGr), decreasing=FALSE)
selInd<- which(start(uniqExGr)>=xLim[1] & (start(uniqExGr)<=xLim[2]))
exonNo<- selInd
if( strTmp== "-")
exonNo<- length(start(uniqExGr))-selInd+1
if(length(selInd)>limPlot)
selInd<- selInd[1:limPlot]
psidat[,selInd]
exonNo<- exonNo[1:limPlot]
par(mfrow=c(1,limPlot))
for (i in 1:length(selInd)){
plotList<- tapply(psidat[,selInd[i]], groupSam, c)
grp<- groupSam
grp[which(grp!="A")]<- "O"
dattmp<- data.frame(exinc=psidat[,selInd[i]], group=grp)
pval<-kruskal.test(exinc ~ group, data = dattmp)$p.value
boxplot(plotList, main=paste("Exon", exonNo[i]),
ylim=c((min(psidat[,selInd])-.1),(max(psidat[,selInd])+.1)),
xlab=paste("P =", trunc(pval*100000)/100000),border=cols)
}
}
}
})
# Show legend
output$plotLegend <- renderPlot({
samNo<- unlist(lapply(LETTERS[1:6], function(x){return(length(which(groupSam==x)))}))
names(samNo)<- LETTERS[1:6]
realNames<-c(
paste("Titinopathy (N=",samNo["A"], ")",sep=""),
"Heart tissue of 19 weeks female embryo (N=1)",
"Skeletal muscle tissue of 22 weeks male (N=1)",
"Heart tissue of 28 weeks female embryo (N=1)",
"Skeletal muscle tissue of 19 weeks female (N=1)",
"Heart tissue of 30 years old female (N=1)")
names(realNames)<- LETTERS[1:6]
par(mar=rep(0,4))
plot(0,.5, xaxt="n" , yaxt="n", axes=FALSE, col=NA, xlab="", ylab="")
cols<- c("black", "red","blue","green", "orange", "purple")
legend("left", legend=c(realNames[(unique(groupSam))], "first exon", "Last exon", "Repeat exon"), lty=c(rep(1,length(unique(groupSam))),NA, NA, NA), pch=c(rep(NA,length(unique(groupSam)) ),24,25, 23),col=c(cols,"black","black", "black"),
pt.bg=c(rep(NA,length(unique(groupSam)) ), "red", "red", "blue"), lwd=rep(2, length(unique(groupSam))+3), pt.cex=c(rep(NA,length(unique(groupSam)) ), 1.5,1.5, 1.5), bg="white")
})
# Define brushing action in main figure
observe({
brush <- input$plotMain_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(1,1)
} else {
ranges$x <- c(min(start(uniqExGr))-100, max(start(uniqExGr))+100)
ranges$y <- c(0,0)
}
})
}
### Run
shinyApp(ui, server)
dir(".")
cd ("..")
setwd("..")
library(shiny)
### ui
ui <- fluidPage(
titlePanel("Inclusion levels of OBSCN exons"),
HTML("<br/><h4>Instructions:</h4>
◉ Brush (<i>i.e.</i> Left-click and drag) to Zoom.<br/>
◉ Left-click once to zoom out.<br/>
◉ When you Zoom you can also see the inclusion levels of the first 6 exons in the selected region as box plots.<br/>
◉ The numbers in the plot (written in black colour) show the exon numbers.<br/>
◉ Pvalues beneathe the box plots are resulted by Kruskal Wallis test (Null hypothesis: exon inclusion in A is equal to that of other samples.)"
),
fluidRow(tags$a(href="https://bioconductor.org/packages/release/bioc/html/IntEREst.html",
tags$img(src="IntEREst_medium.jpg",
title="Example Image Link",
height=90,
width=180))),
fluidRow(
column(12,
plotOutput("plotLegend", width = 300, height = 200)
)),
fluidRow(
column(12,
plotOutput("plotMain", width = 1200, height = 500,
#dblclick = "plotMain_dblclick",
brush = brushOpts(
id = "plotMain_brush"
)),
),
),
fluidRow(
column(12,
plotOutput("plotVar", width = 1200, height = 100)
)
),
fluidRow(
column(12,
plotOutput("plotBox", width = 1200, height = 300))
)
)
### Server
server<- function(input, output) {
ranges <- reactiveValues(x = c(min(start(uniqExGr))-100, max(start(uniqExGr))+100), y =c(0,0) )
output$plotMain <- renderPlot({
strTmp<- "+"
xLim<- sort(ranges$x, decreasing=F)
# layout(matrix(c(1,2), 2, 1, byrow = TRUE),
#        heights=c(3,1))
yDist=.14
par(mar=c(yDist/2, 5.1, 4.1, 2.1))
cols<- c("black", "red","blue","green", "orange", "purple")
plot(start(uniqExGr), psimed[,"A"], lwd=0, col=0, pch=NA,
xlab="", xaxt='n', ylab="mean", ylim=c(-0.03,1), main="OBSCN", xlim=xLim)
for(j in unique(c(firstExInd, lastExInd)))
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
for(j in dupInd)
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
points(start(uniqExGr), psimed[,(unique(groupSam))[1]], type="b", pch=16, lwd=2, col=cols[1])
for(n in 2:length(cols))
points(start(uniqExGr), psimed[,(unique(groupSam))[n]], type="b", pch=16, lwd=2, col=cols[n])
if(strTmp=="+"){
points(start(uniqExGr)[firstExInd], rep(-.03, length(firstExInd)), col=1, bg=2, pch=24, cex=1.5, lwd=2)
points(start(uniqExGr)[lastExInd], rep(-.03, length(lastExInd)), col=1, bg=2, pch=25, cex=1.5, lwd=2)
} else {
points(start(uniqExGr)[firstExInd], rep(-.03, length(firstExInd)), col=1, bg=2, pch=25, cex=1.5, lwd=2)
points(start(uniqExGr)[lastExInd], rep(-.03, length(lastExInd)), col=1, bg=2, pch=24, cex=1.5, lwd=2)
}
points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
# legend("right", legend=c((unique(groupSam)), "first ex", "Last ex", "Repeat ex"), lty=c(rep(1,length(unique(groupSam))),NA, NA, NA), pch=c(rep(NA,length(unique(groupSam)) ),24,25, 23),col=c(cols,"black","black", "black"),
#        pt.bg=c(rep(NA,length(unique(groupSam)) ), "red", "red", "blue"), lwd=rep(2, length(unique(groupSam))+3), pt.cex=c(rep(NA,length(unique(groupSam)) ), 1.5,1.5, 1.5), bg="white")
par(mar=c(5.1, 5.1,yDist/2, 2.1))
tmpPlotVarMed<-as.numeric(apply(psimed,1,var))
if(strTmp=="+"){
xlabTmp<- "-->\nExon start"
} else{
xlabTmp<- "<--\nExon start"
}
exonNo<- 1:length(start(uniqExGr))
if(strTmp=="-")
exonNo<- length(start(uniqExGr))-(1:length(start(uniqExGr)))+1
text(start(uniqExGr), psimed[,"A"],  exonNo,
cex=1, pos=1,col="black", srt=+30)
# plot(start(uniqExGr), tmpPlotVarMed, type="l", lwd=0, col=0, pch=NA, ylab="var", xlab=xlabTmp, xlim=xLim)
# for(j in unique(c(firstExInd, lastExInd)))
#   abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
# for(j in dupInd)
#   abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
# points(start(uniqExGr), tmpPlotVarMed, type="l", pch=16, lwd=2, col="purple")
# points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
})
## Plot variance
output$plotVar <- renderPlot({
strTmp<- "+"
xLim<- sort(ranges$x, decreasing=F)
yDist=.14
par(mar=c(5.1, 5.1,yDist/2, 2.1))
tmpPlotVarMed<-as.numeric(apply(psimed,1,var))
if(strTmp=="+"){
xlabTmp<- "-->\nExon start"
} else{
xlabTmp<- "<--\nExon start"
}
plot(start(uniqExGr), tmpPlotVarMed, type="l", lwd=0, col=0, pch=NA, ylab="var", xlab=xlabTmp, xlim=xLim)
for(j in unique(c(firstExInd, lastExInd)))
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
for(j in dupInd)
abline(v=start(uniqExGr)[j], lty=2, col="grey70", lwd=2)
points(start(uniqExGr), tmpPlotVarMed, type="l", pch=16, lwd=2, col="purple")
points(start(uniqExGr)[dupInd], rep(-.03, length(dupInd)), col=1, bg=4, pch=23, cex=1.5, lwd=2)
})
# Plot boxplots
output$plotBox <- renderPlot({
#par(mar=c(5.1, 5.1,yDist/2, 2.1))
par(mar=c(5.1, 4.1, 4.1, 2.1))
par(cex.lab=1.5)
par(cex.axis=1.5)
par(cex.main=1.5)
cols<- c("black", "red","blue","green", "orange", "purple")
xLim<- sort(ranges$x, decreasing=F)
yLim<- ranges$y
if(yLim[1]==1){
limPlot<- 6
if(length(xLim[1])){
strTmp<- "+"
ordInd<- order(start(uniqExGr), decreasing=FALSE)
selInd<- which(start(uniqExGr)>=xLim[1] & (start(uniqExGr)<=xLim[2]))
exonNo<- selInd
if( strTmp== "-")
exonNo<- length(start(uniqExGr))-selInd+1
if(length(selInd)>limPlot)
selInd<- selInd[1:limPlot]
psidat[,selInd]
exonNo<- exonNo[1:limPlot]
par(mfrow=c(1,limPlot))
for (i in 1:length(selInd)){
plotList<- tapply(psidat[,selInd[i]], groupSam, c)
grp<- groupSam
grp[which(grp!="A")]<- "O"
dattmp<- data.frame(exinc=psidat[,selInd[i]], group=grp)
pval<-kruskal.test(exinc ~ group, data = dattmp)$p.value
boxplot(plotList, main=paste("Exon", exonNo[i]),
ylim=c((min(psidat[,selInd])-.1),(max(psidat[,selInd])+.1)),
xlab=paste("P =", trunc(pval*100000)/100000),border=cols)
}
}
}
})
# Show legend
output$plotLegend <- renderPlot({
samNo<- unlist(lapply(LETTERS[1:6], function(x){return(length(which(groupSam==x)))}))
names(samNo)<- LETTERS[1:6]
realNames<-c(
paste("Titinopathy (N=",samNo["A"], ")",sep=""),
"Heart tissue of 19 weeks female embryo (N=1)",
"Skeletal muscle tissue of 22 weeks male (N=1)",
"Heart tissue of 28 weeks female embryo (N=1)",
"Skeletal muscle tissue of 19 weeks female (N=1)",
"Heart tissue of 30 years old female (N=1)")
names(realNames)<- LETTERS[1:6]
par(mar=rep(0,4))
plot(0,.5, xaxt="n" , yaxt="n", axes=FALSE, col=NA, xlab="", ylab="")
cols<- c("black", "red","blue","green", "orange", "purple")
legend("left", legend=c(realNames[(unique(groupSam))], "first exon", "Last exon", "Repeat exon"), lty=c(rep(1,length(unique(groupSam))),NA, NA, NA), pch=c(rep(NA,length(unique(groupSam)) ),24,25, 23),col=c(cols,"black","black", "black"),
pt.bg=c(rep(NA,length(unique(groupSam)) ), "red", "red", "blue"), lwd=rep(2, length(unique(groupSam))+3), pt.cex=c(rep(NA,length(unique(groupSam)) ), 1.5,1.5, 1.5), bg="white")
})
# Define brushing action in main figure
observe({
brush <- input$plotMain_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(1,1)
} else {
ranges$x <- c(min(start(uniqExGr))-100, max(start(uniqExGr))+100)
ranges$y <- c(0,0)
}
})
}
### Run
shinyApp(ui, server)
getwd()
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN/shinyApp")
shinyApp(ui, server)
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
120*5
679 + 453
adhan::adhanMapHelsinkiMeccaUniTeh()
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW_BatchAdjusted/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW/")
runApp("shinyApp")
library(shiny)
setwd("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW/")
runApp("shinyApp")
ibrary(BiocManager)
library(BiocManager)
library(rsconnect)
options(repos = BiocManager::repositories())
deployApp("/Users/oghabian/Documents/projects/UddLab/OBSCN_NEW/shinyApp/", appName = "OBSCN_PSIVIS")
getwd()
groupSam<- list(scan("groupSam.txt", what="character", sep="\n"),
levels=c("FETAL MUSCLE", "ADULT MUSCLE",
"FETAL HEART", "ADULT HEART"))
setwd("/Users/oghabian/Documents/manuscript/OBSCN/SCRIPTS/")
groupSam<- list(scan("groupSam.txt", what="character", sep="\n"),
levels=c("FETAL MUSCLE", "ADULT MUSCLE",
"FETAL HEART", "ADULT HEART"))
groupSam
groupSam<- factor(scan("groupSam.txt", what="character", sep="\n"),
levels=c("FETAL MUSCLE", "ADULT MUSCLE",
"FETAL HEART", "ADULT HEART"))
groupSam
